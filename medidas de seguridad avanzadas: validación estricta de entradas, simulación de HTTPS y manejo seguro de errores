from flask import Flask, jsonify, request, abort
from flask_restful import Api, Resource
from authlib.integrations.flask_client import OAuth
from functools import wraps
import jwt
from werkzeug.security import check_password_hash, generate_password_hash
from werkzeug.exceptions import BadRequest, Unauthorized, InternalServerError
from validate_email import validate_email
import re
import os

app = Flask(__name__)
api = Api(app)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key')  # Usa variable de entorno
app.config['FORCE_HTTPS'] = True  # Simula forzamiento de HTTPS en producción

# Simulación de base de datos de usuarios (en producción, usa una base de datos real)
users_db = {
    'user@example.com': {
        'password_hash': generate_password_hash('password123'),
        'role': 'user'
    }
}

# Configuración de OAuth 2.0 con Google
oauth = OAuth(app)
google = oauth.register(
    name='google',
    client_id=os.environ.get('GOOGLE_CLIENT_ID', 'your-google-client-id'),
    client_secret=os.environ.get('GOOGLE_CLIENT_SECRET', 'your-google-client-secret'),
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
    api_base_url='https://www.googleapis.com/oauth2/v1/',
    client_kwargs={'scope': 'openid email profile'},
)

# Validación estricta de entradas
def validate_input(data, required_fields, email_field=None):
    for field in required_fields:
        if field not in data or not data[field]:
            raise BadRequest(f'Missing or empty field: {field}')
    if email_field and not validate_email(data[email_field], check_mx=False):
        raise BadRequest('Invalid email format')
    for key, value in data.items():
        if isinstance(value, str):
            if len(value) > 255:  # Límite razonable para entradas
                raise BadRequest(f'Field {key} exceeds maximum length')
            if not re.match(r'^[\w\s@.-]+$', value):  # Solo caracteres permitidos
                raise BadRequest(f'Field {key} contains invalid characters')

# Middleware para forzar HTTPS en producción
def require_https(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if app.config['FORCE_HTTPS'] and not request.is_secure:
            return jsonify({'error': 'HTTPS is required'}), 403
        return f(*args, **kwargs)
    return decorated

# Middleware para autenticación unificada
def auth_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        auth_header = request.headers.get('Authorization', '')
        
        # Autenticación JWT
        if auth_header.startswith('Bearer '):
            token = auth_header.split(" ")[1]
            try:
                data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
                request.user = {'email': data['email'], 'sub': data['sub'], 'auth_type': 'jwt'}
                return f(*args, **kwargs)
            except jwt.InvalidTokenError:
                raise Unauthorized('Invalid or expired token')
        
        # Autenticación básica
        elif auth_header.startswith('Basic '):
            auth = request.authorization
            if not auth or not auth.username or not auth.password:
                raise Unauthorized('Basic auth credentials missing')
            validate_input({'email': auth.username}, [], email_field='email')
            user = users_db.get(auth.username)
            if not user or not check_password_hash(user['password_hash'], auth.password):
                raise Unauthorized('Invalid username or password')
            request.user = {'email': auth.username, 'sub': auth.username, 'auth_type': 'basic'}
            return f(*args, **kwargs)
        
        raise Unauthorized('Authentication required')
    return decorated

# Manejo seguro de errores
@app.errorhandler(BadRequest)
def handle_bad_request(error):
    return jsonify({'error': str(error)}), 400

@app.errorhandler(Unauthorized)
def handle_unauthorized(error):
    return jsonify({'error': str(error)}), 401

@app.errorhandler(InternalServerError)
def handle_internal_error(error):
    return jsonify({'error': 'Internal server error'}), 500

# Endpoint de login para OAuth 2.0
@app.route('/login')
@require_https
def login():
    redirect_uri = 'http://localhost:5000/callback'
    return google.authorize_redirect(redirect_uri)

# Endpoint de callback para OAuth 2.0
@app.route('/callback')
@require_https
def callback():
    try:
        token = google.authorize_access_token()
        user_info = google.get('userinfo').json()
        validate_input({'email': user_info['email']}, [], email_field='email')
        
        jwt_token = jwt.encode({
            'email': user_info['email'],
            'sub': user_info['id']
        }, app.config['SECRET_KEY'], algorithm='HS256')
        
        return jsonify({'token': jwt_token, 'user': {'email': user_info['email'], 'name': user_info.get('name')}})
    except Exception as e:
        raise InternalServerError('Failed to process OAuth callback')

# Endpoint para autenticación básica (registro de usuario)
class Register(Resource):
    @require_https
    def post(self):
        try:
            data = request.get_json()
            required_fields = ['email', 'password']
            validate_input(data, required_fields, email_field='email')
            
            if data['email'] in users_db:
                raise BadRequest('User already exists')
            
            users_db[data['email']] = {
                'password_hash': generate_password_hash(data['password']),
                'role': 'user'
            }
            return jsonify({'message': 'User registered successfully'})
        except Exception as e:
            raise BadRequest(str(e))

# Endpoint protegido
class ProtectedResource(Resource):
    @auth_required
    @require_https
    def get(self):
        return jsonify({
            'message': 'Access granted',
            'user': request.user,
            'data': 'This is a protected resource'
        })

api.add_resource(Register, '/register')
api.add_resource(ProtectedResource, '/protected')

if __name__ == '__main__':
    app.run(debug=True, ssl_context='adhoc')  # Simula HTTPS en desarrollo
